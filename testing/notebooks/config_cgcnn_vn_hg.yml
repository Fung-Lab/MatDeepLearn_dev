trainer: property

task:
  # run_mode: train
  identifier: "cgcnn_vn_hg"
  reprocess: False
  run_id: ""
  parallel: True
  gpu: "cuda:7"
  seed: 0
  # seed=0 means random initalization
  write_output: True
  parallel: True
  # Training print out frequency (print per n number of epochs)
  verbosity: 1
  wandb:
    use_wandb: True
    wandb_entity: "fung-lab"
    wandb_project: "cgcnn_vn"
    notes: "edge_steps=25, heterogeneous"
    tags: ["test"]
    log_artifacts:
      - path: "/nethome/sbaskaran31/projects/Sidharth/MatDeepLearn_dev/configs/examples/cgcnn_vn_hg/config_cgcnn_vn_hg.yml"
        name: "train config"
        type: "config"
      - path: "/nethome/sbaskaran31/projects/Sidharth/MatDeepLearn_dev/matdeeplearn/models/cgcnn_vn_hg.py"
        name: "cgcnn_vn model"
        type: "model"
    metadata:
      architecture: "CGCNN_VN"
      cluster: "fung-cluster"
      dataset: "hMOF-5K"
    sweep:
      do_sweep: False
      sweep_file: "/nethome/sbaskaran31/projects/Sidharth/MatDeepLearn_dev/configs/cgcnn_vn_sweep.yml"

model:
  name: CGCNN_VN_HG
  load_model: False
  save_model: True
  model_path: "cgcnn_vn_hg.pth"
  # model hyperparams
  hyperparams:
    edge_steps: 25
    self_loop: True
    dim1: 100
    dim2: 150
    atomic_intermediate_layer_resolution: 0
    pre_fc_count: 1
    gc_count: 4
    post_fc_count: 3
    pool: "global_mean_pool" # pooling reduction scheme
    virtual_pool: "AtomicNumberPooling" # pooling method
    pool_choice: "virtual" # whether to use virtual or real nodes in RealVirtualPooling
    mp_pattern: ["rr", "rv"]
    pool_order: "early"
    batch_norm: True
    batch_track_stats: True
    act_fn: "relu"
    act_nn: "ReLU"
    dropout_rate: 0.0

optim:
  max_epochs: 250
  lr: 0.002
  loss:
    loss_type: "TorchLossWrapper"
    loss_args: {"loss_fn": "l1_loss"}
  batch_size: 100
  optimizer:
    optimizer_type: "AdamW"
    optimizer_args: {}
  scheduler:
    scheduler_type: "ReduceLROnPlateau"
    scheduler_args: {"mode":"min", "factor":0.8, "patience":10, "min_lr":0.00001, "threshold":0.0002}

dataset:
  processed: True # if False, need to preprocessor data and generate .pt file
  # Path to data files
  src: "/nethome/sbaskaran31/projects/Sidharth/hMOF/raw_5k/data.json"
  target_path: ""
  pt_path: "/nethome/sbaskaran31/projects/Sidharth/hMOF/raw_5k/ocp-vn-2"
  # transforms
  transforms:
    - name: GetY
      args:
        index: 5 # methane adsorption uptake
      otf: False
    - name: VirtualNodes
      args:
        virtual_box_increment: 3
        attrs: ["rr", "rv"]
        rr_cutoff: 5.0
        rv_cutoff: 5.0
      otf: False
  # use for passing into global config
  # one of MDL, ASE, OCP
  use_sweep_params: False
  apply_pre_transform_processing: True
  # use again for passing into global config
  data_format: "json"
  node_representation: "onehot"
  additional_attributes: []
  # Print out processing info
  verbose: True
  # graph specific settings: preprocessing hyperparams
  preprocess_params:
    cutoff_radius : 5.0
    n_neighbors : 250
    edge_calc_method: "ocp"
    num_offsets: 1
    edge_steps : 25
    all_neighbors: True
    use_degree: False
  # Ratios for train/val/test split out of a total of 1
  train_ratio: 0.8
  val_ratio: 0.05
  test_ratio: 0.15
