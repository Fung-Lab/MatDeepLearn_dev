trainer: distill

task:
  #run_mode: train
  identifier: torch_md_subset_late_16
  parallel: False
  # If seed is not set, then it will be random every time
  seed: 12345678
  # Defaults to run directory if not specified
  save_dir: 
  # continue from a previous job
  continue_job: False
  # spefcify if the training state is loaded: epochs, learning rate, etc
  load_training_state: False
  # Path to the checkpoint.pt file
  checkpoint_path: results/2024-06-11-09-00-26-412-torch_md_mpull2P_16/checkpoint_0/checkpoint.pt
  # E.g. [train, val, test]
  write_output: [val, test]
  # Frequency of writing to file; 0 denotes writing only at the end, 1 denotes writing every time
  output_frequency: 1
  # Frequency of saving model .pt file; 0 denotes saving only at the end, 1 denotes saving every time, -1 denotes never saving; this controls both checkpoint and best_checkpoint
  model_save_frequency: 1
  # Specify if labels are provided for the predict task
  # labels: True
  use_amp: False  

teacher_model:
  name: torchmd_et
  # model attributes
  hidden_channels: 128
  num_layers: 8
  num_rbf: 50
  activation: "silu"
  attn_activation: "silu"
  num_heads: 8
  num_post_layers: 1
  post_hidden_channels: 64
  pool: "global_add_pool"
  pool_order: "late"
  aggr: "add"
  dropout_rate: 0.0
  # Compute edge indices on the fly in the model forward
  otf_edge_index: True 
  # Compute edge attributes on the fly in the model forward
  otf_edge_attr: True  
  # Compute node attributes on the fly in the model forward
  otf_node_attr: False
  # compute gradients w.r.t to positions and cell, requires otf_edge_attr=True      
  gradient: True
  # layer output for distillation
  distill_layers: "a8"
  # Train teacher model at the same time
  trainable: False
  # Load teacher model from a checkpoint path.
  teacher_checkpoint_path: results/2024-06-07-20-01-20-943-late_P_128/checkpoint_0/best_checkpoint.pt
  # 1 indicates normal behavior, larger numbers indicate the number of models to be used
  model_ensemble: 1

model:
  name: torchmd_et
  # model attributes
  hidden_channels: 16
  num_layers: 8
  num_rbf: 50
  activation: "silu"
  attn_activation: "silu"
  num_heads: 8
  num_post_layers: 1
  post_hidden_channels: 64
  pool: "global_add_pool"
  pool_order: "late"
  aggr: "add"
  dropout_rate: 0.0
  # Compute edge indices on the fly in the model forward
  otf_edge_index: True 
  # Compute edge attributes on the fly in the model forward
  otf_edge_attr: True  
  # Compute node attributes on the fly in the model forward
  otf_node_attr: False
  # compute gradients w.r.t to positions and cell, requires otf_edge_attr=True      
  gradient: True
  # layer output for distillation
  distill_layers: "a8"
  # 1 indicates normal behavior, larger numbers indicate the number of models to be used
  model_ensemble: 1
  projection_head: False
  mapping_layers: 1

optim:
  max_epochs: 400
  max_checkpoint_epochs: 0
  lr: 0.0001
  # Either custom or from torch.nn.functional library. If from torch, loss_type is TorchLossWrapper
  loss:
    #loss_type: "TorchLossWrapper"
    #loss_args: {loss_fn: l1_loss}
    loss_type: DistillationLoss
    distill_fns: "node2node_vec2vec"
    use_mae: True
    use_huber: False
    huber_delta: 1.0
    weight_energy: 0.01
    weight_force: 50.0
    weight_stress: 50.0
    weight_distillation: 5.0
    attention_weight: False
    attention_dim: 32
  clip_grad_norm: 10
         
  batch_size: 8
  optimizer:
    optimizer_type: AdamW
    optimizer_args: {"weight_decay": 0.0001}
  scheduler:
    scheduler_type: ReduceLROnPlateau
    scheduler_args: {mode: min, factor: 0.7, patience: 10, min_lr: 0.00001, threshold: 0.0002}
  #Training print out frequency (print per n number of epochs)
  verbosity: 1
  # tdqm progress bar per batch in the epoch
  batch_tqdm: False
  
dataset:
  name: distill_p
  processed: False
  # Path to data files - this can either be in the form of a string denoting a single path or a dictionary of {train: train_path, val: val_path, test: test_path, predict: predict_path}
  #src: /global/cfs/projectdirs/m3641/Shared/Materials_datasets/OCP20_S2EF_data/train_raw_20K/data.json
  #src: /global/cfs/projectdirs/m3641/Shared/Materials_datasets/MP_data_forces/raw/data_subset.json
  #src: data/dataset/data_truncated.json
  src: data/dataset/data_phosphorous.json
  # Path to target file within data_path - this can either be in the form of a string denoting a single path or a dictionary of {train: train_path, val: val_path, test: test_path} or left blank when the dataset is a single json file
  # Example: target_path: "data/test_data/raw_graph_scalar/targets.csv"
  target_path: 
  # Path to save processed data.pt file
  pt_path: data/force_data/distill
  # Either "node" or "graph"
  prediction_level: graph
  
  transforms:
    - name: GetY
      args:
        # index specifies the index of a target vector to predict, which is useful when there are multiple property labels for a single dataset
        # For example, an index: 0 (default) will use the first entry in the target vector 
        # if all values are to be predicted simultaneously, then specify index: -1
        index: -1
      otf: True # Optional parameter, default is False
  # Format of data files (limit to those supported by ASE: https://wiki.fysik.dtu.dk/ase/ase/io/io.html)
  data_format: json
  #additional_attributes: [forces]
  additional_attributes: [forces, stress]
  #additional_attributes:
  # Print out processing info
  verbose: True
  # Index of target column in targets.csv
  # graph specific settings
  preprocess_params:
    # one of mdl (minimum image convention), ocp (all neighbors included)
    edge_calc_method: ocp 
    # determine if edges are computed, if false, then they need to be computed on the fly   
    preprocess_edges: False
    # determine if edge attributes are computed during processing, if false, then they need to be computed on the fly   
    preprocess_edge_features: False
    # determine if node attributes are computed during processing, if false, then they need to be computed on the fly   
    preprocess_node_features: True
    # determine if teacher model output are computed during processing
    preprocess_teacher_features: True
    cutoff_radius : 8.0
    n_neighbors : 250
    num_offsets: 2
    # dimension of node attributes
    node_dim : 100
    # dimension of edge attributes
    edge_dim : 50
    self_loop: True
    # Method of obtaining atom dictionary: available: (onehot)
    node_representation: onehot    
    all_neighbors: True
    
  # Number of workers for dataloader, see https://pytorch.org/docs/stable/data.html
  num_workers: 0
  # Where the dataset is loaded; either "cpu" or "cuda"
  dataset_device: cpu
  # Ratios for train/val/test split out of a total of less than 1
  train_ratio: 0.9
  val_ratio: 0.05
  test_ratio: 0.05