trainer: ct_pretrain

task:
  # run_mode: train
  identifier: "ct_pretrain_perturbing"
  reprocess: False
  parallel: True
  # seed=0 means random initalization
  seed: 0
  # Defaults to run directory if not specified
  # save_dir: "."
#  checkpoint_dir: "results/perturbing_300"
  write_output: True
  parallel: True
  #Training print out frequency (print per n number of epochs)
  verbosity: 1

model:
  name: CGCNN_CTPRETRAIN
  load_model: False
  save_model: True
  model_path: "my_model.pth"
  edge_steps: 50
  self_loop: True
  # model attributes
  dim1: 128
  dim2: 128
  pre_fc_count: 1
  gc_count: 3
  post_fc_count: 3
  pool: "global_mean_pool"
  pool_order: "early"
  batch_norm: True
  batch_track_stats: True
  act: "relu"
  dropout_rate: 0.0

optim:
  max_epochs: 300
  max_checkpoint_epochs: 0
  lr: 0.00001
  # Either custom or from torch.nn.functional library. If from torch, loss_type is TorchLossWrapper
  loss:
    loss_type: "BarlowTwinsLoss"
    loss_args: {"batch_size": 100, "embed_size": 128}

  batch_size: 100
  optimizer:
    optimizer_type: "AdamW"
    optimizer_args: {}
  scheduler:
    scheduler_type: "ReduceLROnPlateau"
    scheduler_args: {"mode":"min", "factor":0.8, "patience":10, "min_lr":0.00001, "threshold":0.0002}

dataset:
  processed: True
  # Path to data files - this can either be in the form of a string denoting a single path or a dictionary of {train: train_path, val: val_path, test: test_path}
  src: data/ct_pretrain/data.json
  #src: {train: "data/test_data/raw/", val: "data/test_data/raw/", test: "data/test_data/raw/"}
  # Path to target file within data_path - this can either be in the form of a string denoting a single path or a dictionary of {train: train_path, val: val_path, test: test_path} or left blank when the dataset is a single json file
  target_path:
  #target_path: {train: "data/test_data/targets.csv", val: "data/test_data/targets.csv", test: "data/test_data/targets.csv"}
  # Path to save processed data.pt file
  pt_path: "data/ct_pretrain/processed/"

  transforms:
    - name: GetY
      args:
        index: 0
      otf: False # Optional parameter, default is False
  # Format of data files (limit to those supported by ASE)
  data_format: "json"
  # Method of obtaining atom idctionary: available:(onehot)
  node_representation: "onehot"
  additional_attributes: []
  # Print out processing info
  verbose: True
  # Index of target column in targets.csv
  # graph specific settings
  cutoff_radius : 8.0
  n_neighbors : 12
  edge_steps : 50
  # Ratios for train/val/test split out of a total of 1
  train_ratio: 0.95
  val_ratio: 0.05
  test_ratio: 0
  augmentation: ["perturbing"]
  large_dataset: True